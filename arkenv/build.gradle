dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publish = true
    publications = ['MyPublication']
    configurations = ['archives']
    pkg {
        repo = 'apurebase'
        name = 'arkenv'
        licenses = ['Apache-2.0']
        vcsUrl = 'git@gitlab.com:apurebase/arkenv.git'
        websiteUrl = 'https://gitlab.com/apurebase/arkenv'
        issueTrackerUrl = 'https://gitlab.com/apurebase/arkenv/issues'
        version {
            name = project.version
            released = new Date()
        }
    }

    publishing {
        publications {
            MyPublication(MavenPublication) {
                from components.java
                groupId 'com.apurebase'
                artifactId 'arkenv'
                artifact sourcesJar
                version version
            }
        }
    }
}

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
tasks.test.finalizedBy jacocoTestReport

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/reports")
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        html.enabled = true
        csv.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            '**/*Test*.*'
    ]
    // generated classes
    afterEvaluate {
        classDirectories = project.files(classDirectories.files.collect {
            fileTree(dir: it, excludes: excludes)
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}


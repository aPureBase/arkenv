buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.2.60"
    id "com.github.ben-manes.versions" version "0.20.0"
//    id "com.jfrog.bintray" version "1.8.4"
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC8"
}

ext {
    junit_version = '5.3.0-M1'
}

group 'com.apurebase'
version '1.0.5'

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'jacoco'
//apply plugin: 'com.jfrog.bintray'

repositories {
    jcenter()
    maven {
        url privateMavenReadUrl
        credentials {
            username 'myMavenRepo'
            password privateMavenPassword
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"

    testCompile "org.jmockit:jmockit:1.41"
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_version
    testCompile group: 'org.amshove.kluent', name: 'kluent', version: '1.40'
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

test {
    useJUnitPlatform {
        excludeTags 'slow'
        includeEngines 'junit-jupiter'
    }

    testLogging {
        events "failed"
        exceptionFormat "full"
    }

    failFast = false

    doFirst {
        def jMockit = configurations.testCompile.find {
            it.name.startsWith("jmockit-")
        }
        jvmArgs "-javaagent:${jMockit}"
    }
}

tasks.test.finalizedBy detektCheck
detekt {
    defaultProfile {
        input = file("src/main/kotlin")
        filters = ".*/resources/.*,.*/build/.*"
        config = file("detekt.yml")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    repositories {
        maven {
            url privateMavenWriteUrl
            credentials {
                username 'myMavenRepo'
                password privateMavenPassword
            }
        }
        publications {
            maven(MavenPublication) {
                artifactId project.getName()
                from components.java

                artifact sourcesJar {
                    classifier "sources"
                }
            }
        }
    }
}

check.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
tasks.test.finalizedBy jacocoTestReport

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/reports")
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        html.enabled = true
        csv.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            '**/*Test*.*'
    ]
    // generated classes
    afterEvaluate {
        classDirectories = project.files(classDirectories.files.collect {
            fileTree(dir: it, excludes: excludes)
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

//bintray {
//    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
//    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
//    publish = true
//    publications = ['MyPublication']
//    configurations = ['archives']
//    pkg {
//        repo = 'arkenv'
//        name = 'arkenv'
//        userOrg = user
//        licenses = ['Apache-2.0']
//        vcsUrl = "https://gitlab.com/apurebase/arkenv.git"
//        version {
//            name = project.version
//            released = new Date()
//        }
//    }
//
//    publishing {
//        publications {
//            MyPublication(MavenPublication) {
//                from components.java
//                groupId 'com.apurebase'
//                artifactId 'arkenv'
//                artifact sourcesJar
//                version version
//            }
//        }
//    }
//}
